@{
    Layout = null;
    ViewBag.Title = "NiCris Realtime Tasks Dashboard";
}

<div style="margin:10px 10px 10px 10px;">
    <legend>Tasks Dashboard</legend> 

    <div id="TasksTableContainer"></div>

    <div id="MessagingDiv" class="rectangular-area">
        Enter a message to send to all users:
        <input type="text" id="Message" style="width: 600px;" maxlength="128" />
    </div>

    <div id="TableUpdates" class="rectangular-area">
        <p>Latest received events (You are <span id="MyClientName">@ViewBag.ClientName</span>):</p>
        <ul id="EventsList"></ul>
    </div>
</div>

<style>
    .aligntobottom {
        bottom: 0;
        position: absolute;
    }

    footer.container.navbar-fixed-top {
        top: auto;
        bottom: 9px;
    }

    div.rectangular-area {
        border: 1px solid #999;
        margin-top: 5px;
        margin-bottom: 5px;
        padding: 10px;
        background-color: #EEE;
    }

    #TableUpdates {
        height: 200px;
        overflow: auto;
    }

    .event-deleted {
        color: Red;
    }

    .event-updated {
        color: green;
    }

    .event-created {
        color: blue;
    }

    .event-message {
        color: rgb(117, 117, 117);
    }

    p.demo-info {
        font-size: 12px;
        color: rgb(44, 50, 230);
        font-weight: bold;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {

        // ViewBag.ClientName is set to a random name in the Index action.
        var myClientName = '@ViewBag.ClientName';

        //Initialize jTable
        $('#TasksTableContainer').jtable({
            title: 'Tasks List',
            actions: {
                listAction: '@Url.Action("TaskList", "Task")?clientName=' + myClientName,
                deleteAction: '@Url.Action("DeleteTask", "Task")?clientName=' + myClientName,
                updateAction: '@Url.Action("UpdateTask", "Task")?clientName=' + myClientName,
                createAction: '@Url.Action("CreateTask", "Task")?clientName=' + myClientName
            },

            rowUpdated: function (event, data) {
                /* handle */
                // console.log("rowUpdated");
            },

            fields: {
                Id: {
                    title: 'Id',
                    width: '10%',
                    key: true,
                    create: false,
                    edit: false
                },
                Name: {
                    title: 'Name',
                    width: '20%'
                },
                CreatedBy: {
                    title: 'Created By',
                    width: '15%',
                },
                CreatedDate: {
                    title: 'Created Date',
                    width: '15%',
                    type: 'date',
                    displayFormat: 'yy-mm-dd'
                },
                Resolver: {
                    title: 'Resolver',
                    width: '15%'
                },
                ResolvedDate: {
                    title: 'Resolved Date',
                    width: '15%',
                    type: 'date',
                    displayFormat: 'yy-mm-dd',
                    create: false,
                    edit: false
                },
                Status: {
                    title: 'Status',
                    width: '10%',
                    options: { '0': 'New', '1': 'Active', '2': 'Resolved' }
                }
            }
        });

        // Load task list from server
        $('#TasksTableContainer').jtable('load');

        // Create SignalR object to get communicate with server
        var taskHub = $.connection.taskHub;

        // Define a function to get 'record created' events
        taskHub.RecCreated = function (clientName, record) {
            if (clientName != myClientName) {
                $('#TasksTableContainer').jtable('addRecord', {
                    record: record,
                    clientOnly: true
                });
            }

            writeEvent(clientName + ' has <b>created</b> a new record with id = ' + record.Id, 'event-created');
        };

        // Define a function to get 'record updated' events
        taskHub.RecUpdated = function (clientName, record) {
            if (clientName != myClientName) {
                $('#TasksTableContainer').jtable('updateRecord', {
                    record: record,
                    clientOnly: true
                });
            } else {
                setTimeout(function() {
                    $('#TasksTableContainer').jtable('reload', function() {
                        // refresh current client with any data generated on server
                    });
                }, 5000);
            }

            writeEvent(clientName + ' has <b>updated</b> a new record with id = ' + record.Id, 'event-updated');
        };

        // Define a function to get 'record deleted' events
        taskHub.RecDeleted = function (clientName, Id) {
            if (clientName != myClientName) {
                $('#TasksTableContainer').jtable('deleteRecord', {
                    key: Id,
                    clientOnly: true
                });
            }

            writeEvent(clientName + ' has <b>removed</b> a record with id = ' + Id, 'event-deleted');
        };

        // Define a function to get 'chat messages'
        taskHub.GetMessage = function (clientName, message) {
            writeEvent('<b>' + clientName + '</b> has sent a message: ' + message, 'event-message');
        };

        $('#Message').keydown(function (e) {
            if (e.which == 13) { //Enter
                e.preventDefault();
                taskHub.sendMessage(myClientName, $('#Message').val());
                $('#Message').val('');
            }
        });

        // Start the connection with server
        $.connection.hub.start();

        //A function to write events to the page
        function writeEvent(eventLog, logClass) {
            var now = new Date();
            var nowStr = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();
            $('#EventsList').prepend('<li class="' + logClass + '"><b>' + nowStr + '</b>: ' + eventLog + '.</li>');
        }
    });

</script>

